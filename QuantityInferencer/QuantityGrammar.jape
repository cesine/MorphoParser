/*
*
*  This file is designed to annotate approximate and exact quantities for the use in evaluating etailment
*
*  Gina, 17 Aug 2010
* 
*/
Phase:   Quantity
Input: Token Lookup Number NounPackage
Options: control = appelt

//////////////////////////////////////////////////////////////
//Number macros based on ANNIE NE transducer 2001

Macro: HALF_QUARTER
(
	(	{Token.string == "half"}|
		{Token.string == "quarter"}|
		{Token.string == "third"}|
		{Token.string == "fourth"}|
		{Token.string == "fifth"}|
		{Token.string == "sixth"}|
		{Token.string == "tenth"}
	)
	(	{Token.string == "-"})?
)

Macro: NUMBER_WORDS
// two hundred and thirty five
// twenty five
//a hundred
(
	{Number}
)

Macro: AMOUNT_NUMBER
// enables commas, decimal points and million/billion
// to be included in a number 
(
	{Number}
)


Macro: PERCENT
(	{Token.string == "%"} | 
	{Token.string == "percent"}|
	({Token.string == "per"} {Token.string == "cent"})
)

////////////////////////
//Macros for detecting different sorts of quantity
Macro: MONEYAMOUNT
(
	( 	(AMOUNT_NUMBER) 
		({Lookup.majorType == currency_unit})
	)
	|(	({Token.symbolkind == currency}|{Lookup.majorType == currency_unit})
		(AMOUNT_NUMBER)
		({Lookup.majorType == currency_unit})?
	) 
)

Macro: PERCENTAGEAMOUNT
(
	(	( {Token.string == "+"} | {Token.string == "-"} | {Token.string == "minus"} )?
		( (AMOUNT_NUMBER|NUMBER_WORDS) {Token.string == "point"} )? 
		(AMOUNT_NUMBER|NUMBER_WORDS)
		(PERCENT)
	)
	|(	(AMOUNT_NUMBER|NUMBER_WORDS)
		({Token.string == "-"} | {Token.string == "to"})
		(AMOUNT_NUMBER|NUMBER_WORDS)
		(PERCENT)
	)
	({Token.string == "of"}{Token.category == "NNS"})?
)


//////////////Qualification of the Quantity//////////////////

Macro: SCOPESHIFTERS
( {Token.string == "no"}|
 {Token.string == "not"}
)
Macro: APPROXIMATEQUANTITY
(	{Token.string == "about"}| 
	{Token.string == "around"}| 
	{Token.string == "many"}|
	{Token.string == "over"}|
	{Token.string == "some"}|
	{Token.string == "several"}|
	{Token.string == "nearly"}|
	{Token.string == "roughly"}|
	{Token.string == "approximately"}|
	{Token.string == "only"}|
	( {Token.string == "at"} {Token.string == "least"})|
	( {Token.string == "more"} {Token.string == "than"})|
	( {Token.string == "up"} {Token.string == "to"})|
	( {Token.string == "a"} {Token.string == "few"})|
	( {Token.string == "as"} {Token.string == "few"} {Token.string == "as"})|
	( {Token.string == "as"} {Token.string == "many"} {Token.string == "as"})
)

//the world's largest drug company.

Macro: QUANTITYVERBS
( 	{Token.stem == "higher"}|
	{Token.stem == "increas"}|
	{Token.stem == "decreas"}|
	{Token.stem == "widespread"}|
	{Token.stem == "gain"}
)

Macro: COMPARITIVES
( {Token.stem == "highest"}|
{Token.stem == "largest"}|
{Token.stem == "smallest"}|
{Token.category== "JJS"}
)
///////////////////////////////////////////////////////////////
//Money Rules based on ANNIE NE transducer 2001

Rule:   MoneyCurrencyUnit
// 30 pounds
  (        
      (AMOUNT_NUMBER)
      ({Lookup.majorType == currency_unit})
  )
:number -->
  :number.Money = {kind = "number", rule = "MoneyCurrencyUnit"}


Rule:   MoneySymbolUnit
// $30 
// $30 US
// not $1$21
// $20US
(   
 ({Token.symbolkind == currency}|
  {Lookup.majorType == currency_unit})
 (AMOUNT_NUMBER)
 (
  {Lookup.majorType == currency_unit}
 )?
) 
:number -->
  :number.Money = {kind = "number", rule = "MoneySymbolUnit"}

//////////////////////////////////////////////////////////////
// Percentage Rules based on ANNIE NE transducer

Rule: PercentBasic
// +20%
// minus 10 percent
// two point four percent
(
 ({Token.string == "+"}|
  {Token.string == "-"}|
  {Token.string == "minus"}  
 )?
  ((AMOUNT_NUMBER|NUMBER_WORDS)
  {Token.string == "point"}
 )? 
 (AMOUNT_NUMBER|NUMBER_WORDS)
 (PERCENT)
)
:number -->
  :number.Percent = {rule = "PercentBasic"}

Rule: PercentSpan
// 20-30%
// two to four percent

(
 (AMOUNT_NUMBER|NUMBER_WORDS)
 ({Token.string == "-"} |
  {Token.string == "to"})
 (AMOUNT_NUMBER|NUMBER_WORDS)
 (PERCENT)
)
:number -->
  :number.Percent = {rule = "PercentSpan"}



//////////////////////////////////////////////////////////////
//Quantity Rules

Rule: ApproximateQuantity
//more than 100 bullets
//at least two charges
//over three children
//over 40 billion dollars
//several rounds of talks
//at least half a dozen former Soviet republics 
(
(SCOPESHIFTERS)?
(APPROXIMATEQUANTITY)
(MONEYAMOUNT|PERCENTAGEAMOUNT|
( (AMOUNT_NUMBER|NUMBER_WORDS):quantity
 ({NounPackage}):headnoun) )
 )
:number -->
  :number.ApproximateQuantity = 
  {	rule = "ApproximateQuantity", 
	quantity = :quantity.Number.value, 
	headnoun = :headnoun.NounPackage.headnoun}



Rule: ExactQuantity
//  100 bullets
//  two charges

(
 ( (AMOUNT_NUMBER|NUMBER_WORDS):quantity
 ({NounPackage}):headnoun )| 
MONEYAMOUNT|PERCENTAGEAMOUNT
)
:number -->
  :number.ExactQuantity = {rule = "ExactQuantity", 
			quantity = :quantity.Number.value, 
			headnoun = :headnoun.NounPackage.headnoun}




//////////////////////////////////////////////////////////////
//Age rules

Rule: Age
//35-year-old
//35 years old
// 5-year-olds
(
 (AMOUNT_NUMBER|NUMBER_WORDS):quantity
 ({Token.string == "-"})?
( ({Token.stem == "year"}{Token.stem == "old"})|
({Token.string == "year-old"}) ):headnoun
)
:number -->
  :number.Age = {rule = "Age", 
			quantity = :quantity.Number.value, 
			headnoun = "year"}
//55-year-old 55 years old= 55 year
 //more than 200 tests, more than 200 nuclear tests = 200 tests

// put number and head noun in an array list in java instead of a typical Jape RHS]

