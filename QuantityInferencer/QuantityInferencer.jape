Phase: Inference
Input: pair h t 
Options: control=appelt debug=true

Rule:QuestionAnswering
(
 {pair}
):rte
-->
{
		//get the entire annotation set of "pair"
       AnnotationSet pairAS = (AnnotationSet)bindings.get("rte");
       //create an itterator to itterate through the pairs
       Annotation pairAnno = pairAS.iterator().next();
      
       //get a pair
       AnnotationSet annoInPairAS = inputAS.get(pairAnno.getStartNode().getOffset(), pairAnno.getEndNode().getOffset());
       //get a hypothesis the pair
       Annotation hAnno = annoInPairAS.get("h").iterator().next();
       long startOfTheAnnotationInH=hAnno.getStartNode().getOffset();
	   long endOfTheAnnotationInH=hAnno.getEndNode().getOffset();
       //get the text in the pair
       Annotation tAnno = annoInPairAS.get("t").iterator().next();
       long startOfTheAnnotationInT=tAnno.getStartNode().getOffset();
	   long endOfTheAnnotationInT=tAnno.getEndNode().getOffset();
	   
       boolean entailmentFound = false;
       /*
        * Pseudo code for inference engine
        * for each pair:
        *	 for each annotation type in the hypothesis {Age, Money, Percent, ExactQuantity, ApproximateQuantity} 
        * 			for each annotation  {Age, Money, Percent, ExactQuantity, ApproximateQuantity}  in the text
        * 				compare the string in the "quantity" feature to see if there is a matching string in the text's annotation set. 
        * 
        * if true=entail
        * 
        * Use HashSet to store the types of annotions {Age, Money, Percent, ExactQuantity, ApproximateQuantity} 
        * Use JavaDoc for AnnotationSet, Annotation
        */
       
       /*
        * get
			
			AnnotationSet get(Set<String> types)
			
			    Select annotations by a set of types.
			
			    Parameters:
			        types - the set of annotation types to search for. 
			    Returns:
			        a snapshot copy of all annotations in this set that have one of the requested types. If there are no annotations of the requested types in this set, an empty set is returned. The returned set is immutable.


        */

       Set<String> quantityTypes = new HashSet<String>();
       quantityTypes.add("Age");
       quantityTypes.add("ExactQuantity");
       quantityTypes.add("ApproximateQuantity");
       
       String compaired="";
       
       // for each of the quantity types of annoation, loop through all hypotheses, checking to see if they have potential matches in their texts
       for(String quantityType : quantityTypes) {
    	   //System.out.print(quantityType + " ");
	           	   
	       AnnotationSet quantityAnnotationsInH = outputAS.get(quantityType, startOfTheAnnotationInH, endOfTheAnnotationInH);

	       for(Annotation quantityAnnotationInH : quantityAnnotationsInH) {
		       FeatureMap featuresOfH = quantityAnnotationInH.getFeatures();

		       AnnotationSet quantityAnnotationsInT = outputAS.get(quantityType,  startOfTheAnnotationInT,  endOfTheAnnotationInT);
		       for (Annotation quantityAnnotationInT : quantityAnnotationsInT){
		    	   FeatureMap featuresOfT = quantityAnnotationInT.getFeatures();
		    	   
		    	   String x=(String)featuresOfT.get("headnoun");
		    	   String y=(String)featuresOfH.get("headnoun");
		    	   
		    	   if (x==null || y==null){
		    		   //throw new NullPointerException();
		    		   System.out.print("No headnoun found in pair t:"+featuresOfT+" , h: "+featuresOfH);
		    	   } else if( x.equals(y) ) {
		    		   compaired =" "+x+":"+y;
			    	  // System.out.print("Found an inference."+quantityAnnotationInT.getFeatures().get("headnoun")+" : "+quantityAnnotationInH.getFeatures().get("headnoun")+"\n");
			    	   FeatureMap pairfeatures = pairAnno.getFeatures();
			    	   pairfeatures.put("entail",quantityAnnotationInT.getFeatures().get("headnoun")+"="+quantityAnnotationInH.getFeatures().get("headnoun")+" in "+quantityType);
			    	   entailmentFound= true;
			       }//boolean isYinT = annoInT.get(quantityType).isEmpty()==true?false:true;
		       
		       }
		       /*
		       
		       
		       
		       //get the features from that pair annotation to add the new value for whether the pair are entailed
		       FeatureMap features = pairAnno.getFeatures();
		       //if an annotation about Age is found in both the hypothesis and the text, then say that the pair is entailed, 
		       //else, say that it is not entailed
		       if(isXinH && isYinT){
		               // then we throw it our result
		               features.put("entail",quantityType);
		       }else{
		               features.put("entail","false");
		       }
		       */
	       }
	       if (entailmentFound==false){
	    	   FeatureMap pairfeatures = pairAnno.getFeatures();
	    	   pairfeatures.put("entail",compaired);
	       }
       }

}
